{% doc %}
  Expandable Text Block
  
  This block creates an interactive text component that displays a preview of content
  with a "Read more" link that expands to show the full text when clicked.
  
  Features:
  - Preview and full text content with smooth transitions
  - Customizable "Read more" and "Read less" button text
  - Responsive design with mobile-optimized sizing
  - Accessible with proper ARIA attributes and keyboard navigation
  - Theme styling: inherits colors and typography; controls for spacing
  - Background options: theme-based (Default, Primary, Transparent)
  - Optional border: on/off, style, width, and radius
  - Padding controls: separate top/right/bottom/left for desktop and mobile (px or %)
  - Width control: Fit (page width) or Fill (full width)
  - Focus states for better accessibility
  - Rich text support for both preview and full content
  
  Usage:
  - Add this block to any section that supports blocks
  - Configure heading, preview text, and full text content
  - Customize button text for "Read more" and "Read less" actions
  - Style the component through the theme editor
  - Use rich text editor for formatted content
  
  Dependencies:
  - Requires block.id for unique CSS class generation
  - Custom JavaScript for expand/collapse functionality
  - CSS transitions for smooth animations
  - Custom web component for interactive behavior
  
  Author: Mirabelle Doiron
  Version: 1.0
  Last Updated: 2025-08-07
{% enddoc %}
{% assign expandable_text_block_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .expandable-text-{{ expandable_text_block_id }} {
    display: block;
    {% case block.settings.background_style %}
      {% when 'transparent' %}
        background-color: transparent;
      {% when 'primary' %}
        background-color: var(--color-primary);
      {% else %}
        background-color: var(--color-background);
    {% endcase %}
    padding-top: {{ block.settings.padding_top_desktop }}{% if block.settings.padding_unit_desktop == 'percent' %}%{% else %}px{% endif %};
    padding-right: {{ block.settings.padding_right_desktop }}{% if block.settings.padding_unit_desktop == 'percent' %}%{% else %}px{% endif %};
    padding-bottom: {{ block.settings.padding_bottom_desktop }}{% if block.settings.padding_unit_desktop == 'percent' %}%{% else %}px{% endif %};
    padding-left: {{ block.settings.padding_left_desktop }}{% if block.settings.padding_unit_desktop == 'percent' %}%{% else %}px{% endif %};
    {% if block.settings.border_enabled %}
      border: {{ block.settings.border_width }}px {{ block.settings.border_style }} var(--color-border);
      border-radius: {{ block.settings.border_radius }}px;
    {% endif %}
    margin: 0 auto;
    {% if block.settings.width == 'fit' %}
      max-width: var(--normal-page-width);
    {% else %}
      /* Full-bleed across viewport */
      width: 100vw;
      margin-left: calc(50% - 50vw);
      margin-right: calc(50% - 50vw);
    {% endif %}
  }

  .expandable-text__heading-{{ expandable_text_block_id }} {
    color: var(--font-h2--color);
    font-family: var(--font-heading--family);
    font-weight: var(--font-heading--weight);
    font-size: var(--font-h2--size);
    margin: 0 0 16px 0;
  }

  .expandable-text__heading-{{ expandable_text_block_id }}.is-h1 { color: var(--font-h1--color); font-size: var(--font-h1--size); }
  .expandable-text__heading-{{ expandable_text_block_id }}.is-h2 { color: var(--font-h2--color); font-size: var(--font-h2--size); }
  .expandable-text__heading-{{ expandable_text_block_id }}.is-h3 { color: var(--font-h3--color); font-size: var(--font-h3--size); }
  .expandable-text__heading-{{ expandable_text_block_id }}.is-h4 { color: var(--font-h4--color); font-size: var(--font-h4--size); }
  .expandable-text__heading-{{ expandable_text_block_id }}.is-h5 { color: var(--font-h5--color); font-size: var(--font-h5--size); }
  .expandable-text__heading-{{ expandable_text_block_id }}.is-h6 { color: var(--font-h6--color); font-size: var(--font-h6--size); }

  .expandable-text__content-{{ expandable_text_block_id }} {
    color: var(--color-foreground);
    font-family: var(--font-body--family);
    font-weight: var(--font-body--weight);
    font-size: var(--font-paragraph--size);
    line-height: 1.6;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .expandable-text__content-{{ expandable_text_block_id }}.is-h4 { color: var(--font-h4--color); font-family: var(--font-heading--family); font-weight: var(--font-heading--weight); font-size: var(--font-h4--size); }
  .expandable-text__content-{{ expandable_text_block_id }}.is-h5 { color: var(--font-h5--color); font-family: var(--font-heading--family); font-weight: var(--font-heading--weight); font-size: var(--font-h5--size); }
  .expandable-text__content-{{ expandable_text_block_id }}.is-h6 { color: var(--font-h6--color); font-family: var(--font-heading--family); font-weight: var(--font-heading--weight); font-size: var(--font-h6--size); }

  .expandable-text__preview-{{ expandable_text_block_id }} {
    display: block;
  }

  .expandable-text__full-{{ expandable_text_block_id }} {
    display: none;
  }

  .expandable-text__toggle-{{ expandable_text_block_id }} {
    background: none;
    border: none;
    color: var(--color-primary);
    font-size: inherit;
    text-decoration: underline;
    cursor: pointer;
    padding: 8px 0;
    margin: 0;
    display: inline-block;
    align-self: flex-start;
    transition: color 0.2s ease;
  }

  .expandable-text__toggle-{{ expandable_text_block_id }}:hover { color: var(--color-primary-hover); }

  .expandable-text__toggle-{{ expandable_text_block_id }}:focus { outline: 2px solid currentColor; outline-offset: 2px; }

  .expandable-text-{{ expandable_text_block_id }}.expanded .expandable-text__preview-{{ expandable_text_block_id }} {
    display: none;
  }

  .expandable-text-{{ expandable_text_block_id }}.expanded .expandable-text__full-{{ expandable_text_block_id }} {
    display: block;
  }

  @media screen and (max-width: 749px) {
    .expandable-text-{{ expandable_text_block_id }} {
      padding-top: {{ block.settings.padding_top_mobile }}{% if block.settings.padding_unit_mobile == 'percent' %}%{% else %}px{% endif %};
      padding-right: {{ block.settings.padding_right_mobile }}{% if block.settings.padding_unit_mobile == 'percent' %}%{% else %}px{% endif %};
      padding-bottom: {{ block.settings.padding_bottom_mobile }}{% if block.settings.padding_unit_mobile == 'percent' %}%{% else %}px{% endif %};
      padding-left: {{ block.settings.padding_left_mobile }}{% if block.settings.padding_unit_mobile == 'percent' %}%{% else %}px{% endif %};
    }

    .expandable-text__content-{{ expandable_text_block_id }} {
      gap: 8px;
    }

    .expandable-text__toggle-{{ expandable_text_block_id }} {
      padding: 6px 0;
    }
  }
{% endstyle %}

<expandable-text-{{ expandable_text_block_id }}
  class="expandable-text-{{ expandable_text_block_id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.heading != blank %}
    {% case block.settings.heading_type_preset %}
      {% when 'h1' %}
        <h1 class="expandable-text__heading-{{ expandable_text_block_id }} is-h1">{{ block.settings.heading }}</h1>
      {% when 'h2' %}
        <h2 class="expandable-text__heading-{{ expandable_text_block_id }} is-h2">{{ block.settings.heading }}</h2>
      {% when 'h3' %}
        <h3 class="expandable-text__heading-{{ expandable_text_block_id }} is-h3">{{ block.settings.heading }}</h3>
      {% when 'h4' %}
        <h4 class="expandable-text__heading-{{ expandable_text_block_id }} is-h4">{{ block.settings.heading }}</h4>
      {% when 'h5' %}
        <h5 class="expandable-text__heading-{{ expandable_text_block_id }} is-h5">{{ block.settings.heading }}</h5>
      {% when 'h6' %}
        <h6 class="expandable-text__heading-{{ expandable_text_block_id }} is-h6">{{ block.settings.heading }}</h6>
      {% else %}
        <h2 class="expandable-text__heading-{{ expandable_text_block_id }} is-h2">{{ block.settings.heading }}</h2>
    {% endcase %}
  {% endif %}

  {% liquid
    assign content_type_class = ''
    case block.settings.text_type_preset
      when 'h4'
        assign content_type_class = ' is-h4'
      when 'h5'
        assign content_type_class = ' is-h5'
      when 'h6'
        assign content_type_class = ' is-h6'
    endcase
  %}

  <div class="expandable-text__content-{{ expandable_text_block_id }}{{ content_type_class }}"><div class="expandable-text__preview-{{ expandable_text_block_id }}">
      {{ block.settings.preview_text }}
    </div>

    <div class="expandable-text__full-{{ expandable_text_block_id }}">
      {{ block.settings.full_text }}
    </div>
  </div><button
    class="expandable-text__toggle-{{ expandable_text_block_id }}"
    aria-expanded="false">
    <span class="expandable-text__read-more-{{ expandable_text_block_id }}">{{ block.settings.read_more_text }}</span>
    <span class="expandable-text__read-less-{{ expandable_text_block_id }}" style="display: none;">{{ block.settings.read_less_text }}</span>
  </button>
</expandable-text-{{ expandable_text_block_id }}>

<script>
  (function() {
    class ExpandableText{{ expandable_text_block_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.toggleButton = this.querySelector('.expandable-text__toggle-{{ expandable_text_block_id }}');
        this.readMoreText = this.querySelector('.expandable-text__read-more-{{ expandable_text_block_id }}');
        this.readLessText = this.querySelector('.expandable-text__read-less-{{ expandable_text_block_id }}');
        this.isExpanded = false;

        this.toggleButton.addEventListener('click', () => {
          this.toggleContent();
        });
      }

      toggleContent() {
        this.isExpanded = !this.isExpanded;
        
        if (this.isExpanded) {
          this.classList.add('expanded');
          this.toggleButton.setAttribute('aria-expanded', 'true');
          this.readMoreText.style.display = 'none';
          this.readLessText.style.display = 'inline';
        } else {
          this.classList.remove('expanded');
          this.toggleButton.setAttribute('aria-expanded', 'false');
          this.readMoreText.style.display = 'inline';
          this.readLessText.style.display = 'none';
        }
      }
    }

    customElements.define('expandable-text-{{ expandable_text_block_id }}', ExpandableText{{ expandable_text_block_id }});
  })();
</script>

{% schema %}
{
  "name": "Expandable Text",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "About Our Story"
    },
    {
      "type": "richtext",
      "id": "preview_text",
      "label": "Preview text",
      "default": "<p>This is the preview text that will be shown initially. It should be a brief introduction or summary that entices readers to want to learn more about the topic.</p>"
    },
    {
      "type": "richtext",
      "id": "full_text",
      "label": "Full text",
      "default": "<p>This is the complete text that will be revealed when the user clicks 'Read more'. You can include multiple paragraphs, formatting, and all the detailed information you want to share.</p><p>This expanded content can be much longer and contain all the details that weren't included in the preview. It's perfect for detailed product descriptions, company stories, or any content where you want to give users the choice to read more.</p>"
    },
    {
      "type": "text",
      "id": "read_more_text",
      "label": "Read more text",
      "default": "Read more"
    },
    {
      "type": "text",
      "id": "read_less_text",
      "label": "Read less text",
      "default": "Read less"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "select",
      "id": "background_style",
      "label": "Background",
      "options": [
        { "value": "default", "label": "Default (Theme background)" },
        { "value": "primary", "label": "Primary" },
        { "value": "transparent", "label": "Transparent" }
      ],
      "default": "default"
    },
    {
      "type": "select",
      "id": "width",
      "label": "Width",
      "options": [
        { "value": "fit", "label": "Fit" },
        { "value": "fill", "label": "Fill" }
      ],
      "default": "fit"
    },
    {
      "type": "select",
      "id": "heading_type_preset",
      "label": "Heading type preset",
      "options": [
        {
          "value": "h1",
          "label": "Heading 1"
        },
        {
          "value": "h2",
          "label": "Heading 2"
        },
        {
          "value": "h3",
          "label": "Heading 3"
        },
        {
          "value": "h4",
          "label": "Heading 4"
        },
        {
          "value": "h5",
          "label": "Heading 5"
        },
        {
          "value": "h6",
          "label": "Heading 6"
        }
      ],
      "default": "h2"
    },
    {
      "type": "header",
      "content": "Border"
    },
    {
      "type": "checkbox",
      "id": "border_enabled",
      "label": "Show border",
      "default": false
    },
    {
      "type": "select",
      "id": "border_style",
      "label": "Border style",
      "options": [
        { "value": "solid", "label": "Solid" },
        { "value": "dashed", "label": "Dashed" },
        { "value": "dotted", "label": "Dotted" }
      ],
      "default": "solid"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 8,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 24,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "select",
      "id": "text_type_preset",
      "label": "Text type preset",
      "options": [
        {
          "value": "paragraph",
          "label": "Paragraph"
        },
        {
          "value": "h4",
          "label": "Heading 4"
        },
        {
          "value": "h5",
          "label": "Heading 5"
        },
        {
          "value": "h6",
          "label": "Heading 6"
        }
      ],
      "default": "paragraph"
    },
    
    
    {
      "type": "header",
      "content": "Padding (Desktop)"
    },
    {
      "type": "select",
      "id": "padding_unit_desktop",
      "label": "Unit",
      "options": [
        { "value": "px", "label": "Pixels (px)" },
        { "value": "percent", "label": "Percent (%)" }
      ],
      "default": "px"
    },
    { "type": "range", "id": "padding_top_desktop", "min": 0, "max": 100, "step": 1, "label": "Top", "default": 24 },
    { "type": "range", "id": "padding_right_desktop", "min": 0, "max": 100, "step": 1, "label": "Right", "default": 24 },
    { "type": "range", "id": "padding_bottom_desktop", "min": 0, "max": 100, "step": 1, "label": "Bottom", "default": 24 },
    { "type": "range", "id": "padding_left_desktop", "min": 0, "max": 100, "step": 1, "label": "Left", "default": 24 },
    {
      "type": "header",
      "content": "Padding (Mobile)"
    },
    {
      "type": "select",
      "id": "padding_unit_mobile",
      "label": "Unit",
      "options": [
        { "value": "px", "label": "Pixels (px)" },
        { "value": "percent", "label": "Percent (%)" }
      ],
      "default": "px"
    },
    { "type": "range", "id": "padding_top_mobile", "min": 0, "max": 100, "step": 1, "label": "Top", "default": 16 },
    { "type": "range", "id": "padding_right_mobile", "min": 0, "max": 100, "step": 1, "label": "Right", "default": 16 },
    { "type": "range", "id": "padding_bottom_mobile", "min": 0, "max": 100, "step": 1, "label": "Bottom", "default": 16 },
    { "type": "range", "id": "padding_left_mobile", "min": 0, "max": 100, "step": 1, "label": "Left", "default": 16 },
    
  ],
  "presets": [
    {
      "name": "Expandable Text"
    }
  ]
}
{% endschema %}